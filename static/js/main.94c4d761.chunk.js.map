{"version":3,"sources":["utils/constants.js","utils/conversions.js","utils/actions.js","contracts/blog_approval.teal","contracts/blog_clear.teal","components/Navigation/Navigation.jsx","components/Loading/Loading.jsx","assets/coffee_img.png","pages/BlogDetails/BlogDetails.jsx","pages/Write/Write.jsx","assets/algohall_cover.jpeg","pages/Welcome/Welcome.jsx","pages/Home/Home.jsx","App.js","index.js"],"names":["config","algodClient","algosdk","Algodv2","indexerClient","Indexer","myAlgoConnect","MyAlgoConnect","timeout","minRound","algohallNote","numLocalInts","numLocalBytes","numGlobalInts","numGlobalBytes","ALGORAND_DECIMALS","base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","toFixed","stringToMicroAlgos","str","toNumber","Blog","slug","title","content","thumbnail","author","datePublished","coffeeCount","appId","this","compileProgram","programSource","encoder","TextEncoder","programBytes","encode","compile","do","compileResponse","Uint8Array","result","createBlogAction","senderAddress","blog","getTransactionParams","params","approvalProgram","compiledApprovalProgram","clearProgram","compiledClearProgram","note","appArgs","txn","makeApplicationCallTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","numLocalByteSlices","numGlobalByteSlices","txId","txID","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","pendingTransactionInformation","transactionResponse","tipAuthor","coffee","buyArg","countArg","encodeUint64","Number","txnArgs","appCallTxn","appIndex","paymentTxn","makePaymentTxnWithSuggestedParamsFromObject","to","amount","txnArray","groupId","computeGroupID","i","group","map","tx","getAllBlogsAction","encodedNote","searchForTransactions","notePrefix","txType","transactionInfo","blogs","transactions","transaction","getBlog","push","lookupApplications","includeAll","res","gbState","application","creator","getField","fieldName","find","state","key","fieldKey","undefined","fieldValue","value","bytes","field","uint","console","log","Navigation","balance","disconnect","nav","useNavigate","className","onClick","Loading","class","BlogDetails","fetchBalance","useState","coffeeQty","setCoffeeQty","loading","setLoading","setBlog","useParams","tip","then","blogDetails","alert","catch","e","finally","useCallback","useEffect","src","Date","toLocaleString","readingTime","minutes","coffeeImage","defaultValue","min","onChange","target","Write","React","setThumbnail","blogTitle","setBlogTitle","blogContent","setBlogContent","navigate","create","_uuid","uuid4","_slug","toLowerCase","trim","replace","blogData","String","alt","placeholder","Welcome","connect","height","width","style","borderRadius","algohallCover","Home","connectWallet","allBlogs","setAllBlogs","getAllBlogs","toDateString","App","setAddress","accName","setAccName","setBalance","accountAddress","lookupAccountByID","response","_balance","account","error","accounts","_account","name","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94c4d761.chunk.js","sourcesContent":["import algosdk from \"algosdk\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\n\nconst config = {\n    algodToken: \"\",\n    algodServer: \"https://node.testnet.algoexplorerapi.io/\",\n    algodPort: \"\",\n    indexerToken: \"\",\n    indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io/\",\n    indexerPort: \"\",\n}\n\nexport const algodClient = new algosdk.Algodv2(config.algodToken, config.algodServer, config.algodPort)\n\nexport const indexerClient = new algosdk.Indexer(config.indexerToken, config.indexerServer, config.indexerPort);\n\nexport const myAlgoConnect = new MyAlgoConnect({\n    timeout: 100000000,\n});\n\nexport const minRound = 25556983;\n\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\nexport const algohallNote = \"algohall:ui1\"\n\n// Maximum local storage allocation, immutable\nexport const numLocalInts = 0;\nexport const numLocalBytes = 0;\n// Maximum global storage allocation, immutable\nexport const numGlobalInts = 2; // Global variables stored as Int\nexport const numGlobalBytes = 11; // Global variables stored as Bytes\n\nexport const ALGORAND_DECIMALS = 6;","import { ALGORAND_DECIMALS } from \"./constants\"\nimport BigNumber from \"bignumber.js\"\n\nexport const base64ToUTF8String = (base64String) => {\n    return Buffer.from(base64String, 'base64').toString(\"utf-8\")\n}\n\nexport const utf8ToBase64String = (utf8String) => {\n    return Buffer.from(utf8String, 'utf8').toString('base64')\n}\n\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 5, address.length);\n}\n\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\nexport const microAlgosToString = (num) => {\n    if (!num) return\n    let bigNumber = new BigNumber(num)\n    return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\n}\n\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\nexport const stringToMicroAlgos = (str) => {\n    if (!str) return\n    let bigNumber = new BigNumber(str)\n    return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\n}","import algosdk from \"algosdk\";\nimport {\n    algodClient,\n    indexerClient,\n    algohallNote,\n    minRound,\n    myAlgoConnect,\n    numGlobalBytes,\n    numGlobalInts,\n    numLocalBytes,\n    numLocalInts\n} from \"./constants\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport approvalProgram from \"!!raw-loader!../contracts/blog_approval.teal\";\nimport clearProgram from \"!!raw-loader!../contracts/blog_clear.teal\";\nimport {base64ToUTF8String, utf8ToBase64String, stringToMicroAlgos} from \"./conversions\";\n\nclass Blog {\n    constructor(slug, title, content, thumbnail, author, datePublished, coffeeCount, appId) {\n        this.slug = slug;\n        this.title = title;\n        this.content = content;\n        this.thumbnail = thumbnail;\n        this.author = author;\n        this.datePublished = datePublished;\n        this.coffeeCount = coffeeCount;\n        this.appId = appId;\n    }\n}\n\n// Compile smart contract in .teal format to program\nconst compileProgram = async (programSource) => {\n    let encoder = new TextEncoder();\n    let programBytes = encoder.encode(programSource);\n    let compileResponse = await algodClient.compile(programBytes).do();\n    return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n}\n\n// Create Blog ApplicationCreateTxn\nexport const createBlogAction = async (senderAddress, blog) => {\n    let params = await algodClient.getTransactionParams().do();\n\n    // Compile programs\n    const compiledApprovalProgram = await compileProgram(approvalProgram)\n    const compiledClearProgram = await compileProgram(clearProgram);\n\n    // Build note to identify transaction later and required appArgs as Uint8Arrays\n    let note = new TextEncoder().encode(algohallNote)\n    let slug = new TextEncoder().encode(blog.slug)\n    let title = new TextEncoder().encode(blog.title)\n    let content = new TextEncoder().encode(blog.content)\n    let thumbnail = new TextEncoder().encode(blog.thumbnail)\n\n    let appArgs = [slug, title, content, thumbnail]\n\n    // Create ApplicationCreateTxn\n    let txn = algosdk.makeApplicationCallTxnFromObject({\n        from: senderAddress,\n        suggestedParams: params,\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n        approvalProgram: compiledApprovalProgram,\n        clearProgram: compiledClearProgram,\n        numLocalInts: numLocalInts,\n        numLocalByteSlices: numLocalBytes,\n        numGlobalInts: numGlobalInts,\n        numGlobalByteSlices: numGlobalBytes,\n        note: note,\n        appArgs: appArgs\n    });\n\n    // Get transaction ID\n    let txId = txn.txID().toString();\n\n    // Sign and submit transaction \n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n    // Get created application ID and broadcast completion\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n    let appId = transactionResponse['application-index']\n\n    return appId\n}\n\n// Tip author\nexport const tipAuthor = async(senderAddress, blog, coffee) => {\n    let params = await algodClient.getTransactionParams().do()\n\n    // Build required app args as Uint8Array\n    let buyArg = new TextEncoder().encode(\"buyCoffee\")\n    let countArg = algosdk.encodeUint64(Number(coffee))\n    let txnArgs = [buyArg, countArg] \n\n    // Create ApplicationCallTxn\n    let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n        from: senderAddress,\n        appIndex: Number(blog.appId),\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n        suggestedParams: params,\n        appArgs: txnArgs\n    })\n\n    // Create PaymentTxn\n    let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: senderAddress,\n        to: blog.author,\n        amount: stringToMicroAlgos(coffee),\n        suggestedParams: params\n    })\n\n    let txnArray = [appCallTxn, paymentTxn]\n\n    // Create group transaction out of previously build transaction\n    let groupId = algosdk.computeGroupID(txnArray)\n    for (let i = 0; i < 2; i++) txnArray[i].group = groupId;\n\n    // Sign and submit group transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\n\n    let tx = await algodClient.sendRawTransaction(signedTxn.map(txn => txn.blob)).do();\n\n    // Wait for group transaction to be confirmed\n    await algosdk.waitForConfirmation(algodClient, tx.txId, 4)\n}\n\n// Get all blogs\nexport const getAllBlogsAction = async () => {\n    let note = new TextEncoder().encode(algohallNote)\n    let encodedNote = Buffer.from(note).toString(\"base64\")\n\n    // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\n    let transactionInfo = await indexerClient.searchForTransactions()\n        .notePrefix(encodedNote)\n        .txType(\"appl\")\n        .minRound(minRound)\n        .do()\n\n    let blogs = []\n\n    for (const transaction of transactionInfo.transactions) {\n        let appId = transaction[\"created-application-index\"]\n        if (appId) {\n            // Step 2: Get each application by application id\n            let blog = await getBlog(appId)\n            if (blog) {\n                blogs.push(blog)\n            }\n        }\n    }\n\n    return blogs\n}\n\n// GET BLOG INFO\nexport const getBlog = async (appId) => {\n    try {\n        // Step 1: Get application by appId\n        let res = await indexerClient.lookupApplications(appId).includeAll(true).do()\n        let gbState = res.application.params[\"global-state\"]\n\n        // Step 2: Parse response fields\n        let slug = \"\"\n        let title = \"\"\n        let content = \"\"\n        let thumbnail = \"\"\n        let author = res.application.params.creator\n        let datePublished = \"\"\n        let coffeeCount = \"\"\n\n        const getField = (fieldName, gbState) => {\n            return gbState.find(state => {\n                return state.key === utf8ToBase64String(fieldName)\n            })\n        }\n\n        for (let i = 0; i < 100; i++) {\n            let fieldKey = i.toString()\n            if (getField(fieldKey, gbState) !== undefined) {\n                let fieldValue = getField(fieldKey, gbState).value.bytes;\n                content += base64ToUTF8String(fieldValue)\n            }\n        }\n\n        if (getField(\"SLUG\", gbState) !== undefined) {\n            let field = getField(\"SLUG\", gbState).value.bytes\n            slug = base64ToUTF8String(field)\n        }\n\n        if (getField(\"TITLE\", gbState) !== undefined) {\n            let field = getField(\"TITLE\", gbState).value.bytes\n            title = base64ToUTF8String(field)\n        }\n\n        if (getField(\"THUMBNAIL\", gbState) !== undefined) {\n            let field = getField(\"THUMBNAIL\", gbState).value.bytes\n            thumbnail = base64ToUTF8String(field)\n        }\n\n        if (getField(\"DATEPUBLISHED\", gbState) !== undefined) {\n            datePublished = getField(\"DATEPUBLISHED\", gbState).value.uint\n        }\n\n        if (getField(\"COFFEECOUNT\", gbState) !== undefined) {\n            coffeeCount = getField(\"COFFEECOUNT\", gbState).value.uint\n        }\n\n        return new Blog(slug, title, content, thumbnail, author,  datePublished, coffeeCount, appId)\n    } catch(e) {\n        console.log(e)\n        return null\n    }\n}","export default \"#pragma version 6\\ntxn ApplicationID\\nint 0\\n==\\nbnz main_l4\\ntxna ApplicationArgs 0\\nbyte \\\"buyCoffee\\\"\\n==\\nbnz main_l3\\nerr\\nmain_l3:\\nbyte \\\"COFFEECOUNT\\\"\\nbyte \\\"COFFEECOUNT\\\"\\napp_global_get\\ntxna ApplicationArgs 1\\nbtoi\\n+\\napp_global_put\\nint 1\\nreturn\\nmain_l4:\\ntxn NumAppArgs\\nint 4\\n==\\nassert\\ntxn Note\\nbyte \\\"algohall:ui1\\\"\\n==\\nassert\\ntxna ApplicationArgs 2\\ncallsub storecontent_1\\nbyte \\\"SLUG\\\"\\ntxna ApplicationArgs 0\\napp_global_put\\nbyte \\\"TITLE\\\"\\ntxna ApplicationArgs 1\\napp_global_put\\nbyte \\\"THUMBNAIL\\\"\\ntxna ApplicationArgs 3\\napp_global_put\\nbyte \\\"AUTHOR\\\"\\ntxn Sender\\napp_global_put\\nbyte \\\"DATEPUBLISHED\\\"\\nglobal LatestTimestamp\\napp_global_put\\nbyte \\\"COFFEECOUNT\\\"\\nint 0\\napp_global_put\\nint 1\\nreturn\\n\\n// convert_uint_to_bytes\\nconvertuinttobytes_0:\\nstore 7\\nload 7\\nint 0\\n==\\nbnz convertuinttobytes_0_l5\\nbyte \\\"\\\"\\nstore 8\\nload 7\\nstore 9\\nconvertuinttobytes_0_l2:\\nload 9\\nint 0\\n>\\nbnz convertuinttobytes_0_l4\\nload 8\\nb convertuinttobytes_0_l6\\nconvertuinttobytes_0_l4:\\nload 9\\nint 10\\n%\\nstore 10\\nbyte \\\"0123456789\\\"\\nload 10\\nload 10\\nint 1\\n+\\nsubstring3\\nload 8\\nconcat\\nstore 8\\nload 9\\nint 10\\n/\\nstore 9\\nb convertuinttobytes_0_l2\\nconvertuinttobytes_0_l5:\\nbyte \\\"0\\\"\\nconvertuinttobytes_0_l6:\\nretsub\\n\\n// store_content\\nstorecontent_1:\\nstore 0\\nload 0\\nlen\\nstore 2\\nint 0\\nstore 1\\nstorecontent_1_l1:\\nload 1\\nint 8\\n<\\nbz storecontent_1_l7\\nload 1\\ncallsub convertuinttobytes_0\\nstore 6\\nint 127\\nload 1\\n*\\nstore 4\\nload 2\\nint 0\\n==\\nbnz storecontent_1_l7\\nload 2\\nint 127\\n>\\nbnz storecontent_1_l6\\nload 2\\nstore 3\\nload 2\\nload 3\\n-\\nstore 2\\nstorecontent_1_l5:\\nload 0\\nload 4\\nload 3\\nextract3\\nstore 5\\nload 6\\nload 5\\napp_global_put\\nload 1\\nint 1\\n+\\nstore 1\\nb storecontent_1_l1\\nstorecontent_1_l6:\\nload 2\\nint 127\\n-\\nstore 2\\nint 127\\nstore 3\\nb storecontent_1_l5\\nstorecontent_1_l7:\\nretsub\";","export default \"#pragma version 6\\nint 1\\nreturn\";","import React, { useState, useEffect, useCallback } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { microAlgosToString, truncateAddress } from \"../../utils/conversions\";\nimport \"./Navigation.scss\";\n\nconst Navigation = ({ balance, address, disconnect }) => {\n  const nav = useNavigate()\n  return (\n    <>\n      <div className=\"app__nav\">\n        <div className=\"nav-logo\">AlgoHall</div>\n        <div className=\"nav-links\">\n          <Link className=\"nav-link\" to=\"/\">\n            Home\n          </Link>\n          {address && <Link className=\"nav-link\" to=\"/write\">\n            Write\n          </Link>}\n\n        </div>\n        <div className=\"nav-end\">\n          <div className=\"nav-end--profile\">\n            {truncateAddress(address)} | {microAlgosToString(balance)} ALGO\n          </div>\n          <div className=\"nav-end--logout\" onClick={() => {disconnect(); nav(\"/\")}}>\n            Disconnect\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Navigation;\n","import React from 'react'\nimport \"./Loading.css\"\n\nconst Loading = () => {\n    return (\n        <div class=\"container\">\n            <span class=\"spinner spinner--dotted\"></span>\n        </div>\n    )\n}\n\nexport default Loading","export default __webpack_public_path__ + \"static/media/coffee_img.38659b77.png\";","import React, { useState, useEffect, useCallback } from \"react\";\nimport coffeeImage from \"../../assets/coffee_img.png\";\nimport { useParams } from \"react-router\";\nimport { truncateAddress } from \"../../utils/conversions\";\nimport \"./BlogDetails.scss\";\nimport { getBlog, tipAuthor } from \"../../utils/actions\";\nimport { readingTime } from \"reading-time-estimator\";\nimport { Loading } from \"../../components\";\n\nconst BlogDetails = ({ address, fetchBalance }) => {\n  const [coffeeQty, setCoffeeQty] = useState(1);\n  const [loading, setLoading] = useState(false)\n  const [blog, setBlog] = useState();\n  const { appId } = useParams();\n\n  const tip = async () => {\n    setLoading(true)\n    await tipAuthor(address, blog, coffeeQty)\n      .then(() => {\n        fetchBalance(address)\n        blogDetails()\n        alert(\"Successfully tipped author\");\n      })\n      .catch(e => console.log(\"Error tipping author: \" + e))\n      .finally(() => setLoading(false));\n    console.log(\"Tipped author \" + coffeeQty + \" Coffee\")\n\n  };\n\n  const blogDetails = useCallback(async () => {\n    try {\n      setLoading(true)\n      setBlog(await getBlog(appId));\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setLoading(false)\n    }\n    \n  });\n\n  useEffect(() => {\n    blogDetails();\n  }, []);\n\n  return (\n    <>\n      {!loading && blog ? (\n        <div className=\"app__details\">\n          <div className=\"details\">\n            <img src={blog.thumbnail} />\n            <div className=\"details-meta-0\">\n              <div className=\"details-meta-1\">\n                <div className=\"details-dp\">\n                  {new Date(blog.datePublished * 1000).toLocaleString()}\n                </div>\n                <div className=\"details-rt\">\n                  {readingTime(blog.content).minutes} mins read\n                </div>\n              </div>\n              <div className=\"details-author\">\n                by <span>{truncateAddress(blog.author)}</span>\n              </div>\n            </div>\n            <div className=\"details-title\">{blog.title}</div>\n            <div className=\"details-details\">{blog.content}</div>\n            <hr />\n            <div className=\"details-lc\">\n              <div className=\"details-lc-1\">\n                <img src={coffeeImage} />\n                <div>{blog.coffeeCount}</div>\n              </div>\n              <div className=\"details-lc-2\">\n                <span onClick={() => tip()}>Buy author {coffeeQty} coffee</span>\n                <input\n                  defaultValue={1}\n                  min={1}\n                  value={coffeeQty}\n                  onChange={(e) => setCoffeeQty(e.target.value)}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <Loading/>\n      )}\n    </>\n  );\n};\n\nexport default BlogDetails;\n","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { v4 as uuid4 } from \"uuid\";\nimport \"./Write.scss\";\nimport { createBlogAction } from \"../../utils/actions\";\n\nconst Write = ({ address }) => {\n  const [thumbnail, setThumbnail] = React.useState();\n  const [blogTitle, setBlogTitle] = useState();\n  const [blogContent, setBlogContent] = useState();\n  const navigate = useNavigate();\n\n  const slugify = (str) =>\n    str\n      .toLowerCase()\n      .trim()\n      .replace(/[^\\w\\s-]/g, \"\")\n      .replace(/[\\s_-]+/g, \"-\")\n      .replace(/^-+|-+$/g, \"\");\n\n  const create = async () => {\n    const _uuid = uuid4();\n    const _slug = `${slugify(blogTitle)}-${_uuid}`;\n    const blogData = {\n      slug: _slug,\n      title: blogTitle,\n      content: blogContent,\n      thumbnail: thumbnail,\n    };\n\n    if (String(blogTitle).length > 126 || String(thumbnail).length > 126) {\n      alert(\"Title or thumbnail URL should be less than 126 characters\")\n      return;\n    }\n\n    if (String(blogContent).length > 1000) {\n      alert(\"Content should be less than 1000 words\");\n      return;\n    }\n\n    await createBlogAction(address, blogData)\n      .then(() => {\n        navigate(\"/\");\n        alert(\"Successfully created new blog\");\n      })\n      .catch(e => console.log(\"Error creating blog: \" + e));\n  };\n\n  return (\n    <>\n      <div className=\"app__write\">\n        <div className=\"write\">\n          <div className=\"write-header\">\n            <img src={thumbnail} alt=\"thumbnail image\" />\n            <input\n              value={thumbnail}\n              onChange={(e) => setThumbnail(e.target.value)}\n              placeholder=\"Enter thumbnail URL here (Less than 126 characters)\"\n            />\n          </div>\n          <div className=\"write-edit\">\n            <input\n              className=\"write-title\"\n              placeholder=\"Title here (Less than 126 characters)\"\n              value={blogTitle}\n              onChange={(e) => setBlogTitle(e.target.value)}\n            />\n            <textarea\n              className=\"write-content\"\n              placeholder=\"Write any update about the Algorand blockchain. It can be about Pyteal, Reach, algosdk, etc. (Should be less than 1000 characters)\"\n              value={blogContent}\n              onChange={(e) => setBlogContent(e.target.value)}\n            />\n          </div>\n          <button className=\"publish-btn\" onClick={() => create()}>\n            Post Update\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Write;\n","export default __webpack_public_path__ + \"static/media/algohall_cover.4e61b276.jpeg\";","import React from \"react\";\nimport algohallCover from \"../../assets/algohall_cover.jpeg\"\nimport \"./Welcome.scss\";\n\nconst Welcome = ({connect}) => {\n  return (\n    <div className=\"app__welcome\">\n      <div className=\"welcome-title\">\n        <span>Algo Hall</span>\n      </div>\n      <div className=\"welcome-sub\">\n        The all-in-one platform to get all your updates on the Algorand blockchain\n      </div>\n      <img height={\"500px\"} width={\"500px\"} style={{borderRadius: \"30%\"}} src={algohallCover}/>\n      <div className=\"welcome-text\">\n        Please <span onClick={() => connect()}>Connect</span> your wallet to access this platform\n      </div>\n    </div>\n  );\n};\n\nexport default Welcome;\n","import React, {useState, useEffect} from 'react'\nimport { Welcome } from \"../\";\nimport { Loading } from '../../components';\nimport { readingTime } from \"reading-time-estimator\";\nimport { Link } from \"react-router-dom\";\nimport coffeeImage from \"../../assets/coffee_img.png\";\nimport { getAllBlogsAction } from '../../utils/actions';\nimport { truncateAddress } from '../../utils/conversions';\nimport \"./Home.scss\"\n\n\nconst Home = ({connectWallet, address}) => {\n    const [allBlogs, setAllBlogs] = useState(null)\n    const [loading, setLoading] = useState(false)\n\n    const getAllBlogs = async () => {\n        setLoading(true);\n        getAllBlogsAction()\n            .then(blogs => {\n                setAllBlogs(blogs)\n                console.log(blogs)\n            })\n            .catch(e => {\n                console.log(e)\n                alert(\"Error getting blogs\")\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n    } \n\n    useEffect(() => {\n        getAllBlogs()\n    }, [])\n\n  return (\n    <>\n      {address ? (\n        <>\n          <div className=\"app__app\">\n            <h2 className=\"app-heading\">Recently Published Blogs</h2>\n            {!loading ? (\n              <div className=\"app-body\">\n                {allBlogs?.map((blog) => (\n                  <div className=\"preview\">\n                    <img src={blog.thumbnail} />\n                    <div className=\"preview-meta-0\">\n                      <div className=\"preview-meta-1\">\n                        <div className=\"preview-dp\">\n                          {new Date(\n                            blog.datePublished * 1000\n                          ).toDateString()}\n                        </div>\n                        <div className=\"preview-rt\">\n                          {readingTime(blog.content).minutes} mins read\n                        </div>\n                      </div>\n                      <div className=\"preview-author\">\n                        by <span>{truncateAddress(blog.author)}</span>\n                      </div>\n                    </div>\n                    <div className=\"preview-title\">\n                      <Link to={`/blog/${blog.appId}`}>{blog.title}</Link>\n                    </div>\n                    <div className=\"preview-preview\">{blog.content}</div>\n                    <hr />\n                    <div className=\"preview-lc\">\n                      <img src={coffeeImage} />\n                      <div>{blog.coffeeCount}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <Loading/>\n            )}\n          </div>\n        </>\n      ) : (\n        <Welcome connect={connectWallet} />\n      )}\n    </>\n  )\n}\n\nexport default Home","import React, { useState } from \"react\";\nimport { Navigation } from \"./components\";\nimport \"./App.scss\";\nimport { Welcome, Write, Home, BlogDetails } from \"./pages\";\nimport { indexerClient, myAlgoConnect } from \"./utils/constants\"\nimport { HashRouter as Router, Routes, Route } from \"react-router-dom\";\n\n\nconst App = () => {\n  const [address, setAddress] = useState(null);\n  const [accName, setAccName] = useState(null)\n  const [balance, setBalance] = useState(0);\n\n  const fetchBalance = async (accountAddress) => {\n    indexerClient.lookupAccountByID(accountAddress).do()\n      .then(response => {\n        const _balance = response.account.amount;\n        setBalance(_balance);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const connectWallet = async () => {\n    myAlgoConnect.connect()\n      .then(accounts => {\n        const _account = accounts[0];\n        setAddress(_account.address);\n        setAccName(_account.name);\n        fetchBalance(_account.address);\n      }).catch(error => {\n        console.log('Could not connect to MyAlgo wallet');\n        console.error(error);\n      })\n  };\n\n  const disconnect = () => {\n    setAddress(null);\n    setAccName(null);\n    setBalance(null);\n  };\n\n  return (\n    <>\n      <Router>\n        <Navigation\n          accName={accName}\n          balance={balance}\n          address={address}\n          disconnect={disconnect}\n        />\n        <Routes>\n          <Route path=\"/\" element={<Home connectWallet={connectWallet} address={address} />} />\n          <Route path=\"/write\" element={<Write address={address} />} />\n          <Route path=\"/welcome\" element={<Welcome connect={connectWallet} />} />\n          <Route path=\"/blog/:appId\" element={<BlogDetails address={address} fetchBalance={fetchBalance}/>} />\n        </Routes>\n      </Router>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}